/*
 * QUANTCONNECT.COM - Democratizing Finance, Empowering Individuals.
 * Lean Algorithmic Trading Engine v2.0. Copyright 2014 QuantConnect Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*/

using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using QLNet;
using QuantConnect.Orders;

namespace QuantConnect.Data.Market
{
    public class DelistingEqualityComparer : EqualityComparer<Delisting>
    {
        public override bool Equals(Delisting x, Delisting y)
        {
            return x.symbol.Equals(y.symbol);
        }

        public override int GetHashCode(Delisting x)
        {
            return x.symbol.GetHashCode();
        }
    }

    /// <summary>
    /// Delisting event of a security
    /// </summary>
    public class Delisting : BaseData
    {
        internal DelistingType type;
        internal OrderTicket ticket;

        /// <summary>
        /// Gets the type of delisting, warning or delisted
        /// A <see cref="DelistingType.Warning"/> is sent
        /// </summary>
        [JsonProperty]
        public DelistingType Type
        {
            get => type;
            private set => type = value;
        }

        [JsonProperty]
        public DateTime DelistedUtcTime { get; }

        [JsonProperty]
        public DateTime DelistedDate { get; }

        /// <summary>
        /// Gets the <see cref="OrderTicket"/> that was submitted to liquidate this position
        /// </summary>
        public OrderTicket Ticket
        {
            get => ticket;
            private set => ticket = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Delisting"/> class
        /// </summary>
        public Delisting()
        {
            DataType = MarketDataType.Auxiliary;
            type = DelistingType.Delisted;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Delisting"/> class
        /// </summary>
        /// <param name="symbol">The delisted symbol</param>
        /// <param name="enevtTime">event time</param>
        /// <param name="delistedDate">The delistedDate the symbol was delisted</param>
        /// <param name="price">The final price before delisting</param>
        /// <param name="type">The type of delisting event</param>
        public Delisting(Symbol symbol, DateTime enevtTime, DateTime delistedDate, decimal price, DelistingType type)
            : this()
        {
            this.symbol = symbol;
            Time = enevtTime;
            DelistedDate = delistedDate;
            DelistedUtcTime = delistedDate.ConvertToUtc(symbol.ExchangeTimeZone);
            value = price;
            this.type = type;
        }

        /// <summary>
        /// Sets the <see cref="OrderTicket"/> used to liquidate this position
        /// </summary>
        /// <param name="ticket">The ticket that represents the order to liquidate this position</param>
        public void SetOrderTicket(OrderTicket ticket)
        {
            this.ticket = ticket;
        }

        /// <summary>
        /// Reader converts each line of the data source into BaseData objects. Each data type creates its own factory method, and returns a new instance of the object
        /// each time it is called.
        /// </summary>
        /// <param name="config">Subscription data config setup object</param>
        /// <param name="line">Line of the source document</param>
        /// <param name="date">Date of the requested data</param>
        /// <param name="isLiveMode">true if we're in live mode, false for backtesting mode</param>
        /// <returns>Instance of the T:BaseData object generated by this line of the CSV</returns>
        public override BaseData Reader(SubscriptionDataConfig config, string line, DateTime date, bool isLiveMode)
        {
            throw new NotImplementedException("This method is not supposed to be called on the Delisting type.");
        }

        /// <summary>
        /// Return the URL string source of the file. This will be converted to a stream
        /// </summary>
        /// <param name="config">Configuration object</param>
        /// <param name="date">Date of this source file</param>
        /// <param name="isLiveMode">true if we're in live mode, false for backtesting mode</param>
        /// <returns>String URL of source file.</returns>
        public override SubscriptionDataSource GetSource(SubscriptionDataConfig config, DateTime date, bool isLiveMode)
        {
            throw new NotImplementedException("This method is not supposed to be called on the Delisting type.");
        }

        /// <summary>
        /// Return a new instance clone of this object, used in fill forward
        /// </summary>
        /// <remarks>
        /// This base implementation uses reflection to copy all public fields and properties
        /// </remarks>
        /// <returns>A clone of the current object</returns>
        public override BaseData Clone()
        {
            return new Delisting(symbol, time, DelistedDate, value, type);
        }

        /// <summary>
        /// Formats a string with the symbol and value.
        /// </summary>
        /// <returns>string - a string formatted as SPY: 167.753</returns>
        public override string ToString()
        {
            var s = type == DelistingType.Warning ? "Delisting Warning" : "Delisted";
            return $"{s}: {symbol} {endTime}";
        }
    }
}
